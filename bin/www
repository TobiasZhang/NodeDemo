#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('nodedemo:server');
var http = require('http');


/**
 * TCP socket
*/
/*var tcpServer = require('net');
 tcpServer.createServer(function(socket) {
   //new connection 我们获得一个连接 - 该连接自动关联一个socket对象
   console.log('新连接connect: ' +
     socket.remoteAddress + ':' + socket.remotePort);
   //socket.setEncoding('binary');

   //接收到数据
   socket.on('data', function(data) {
       console.log(socket.remoteAddress+'说:'+data.toString())
   });
   //数据错误事件
   socket.on('error',function(exception){
       console.log('---客户端异常断开---')
       console.log('socket error:' + exception);
       socket.end();
   });
   //客户端关闭事件
   socket.on('close',function(data){
     console.log('close: ' +
       socket.remoteAddress + ' ' + socket.remotePort);
  })

 }).listen(4000);*/




/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
app.ready(server);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port,()=>console.log('---server开启监听---'+port));
server.on('error', onError);
server.on('listening', onListening);




/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
